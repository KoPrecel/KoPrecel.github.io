[{"content":"Introduction I frequently start a post and edit them as I learn. As such, my posts are constantly updated but the post date stays in the past. Plus, if I learn something in the future, I want to revisit my old posts and add relevant information as needed. The thing is that I don\u0026rsquo;t want to worry about manually changing the \u0026ldquo;Last Edited Date\u0026rdquo;; rather, I want it done automatically. Fortunately, there is a way to do exactly that on Hugo! Let\u0026rsquo;s learn how to implement a last edited date, so that we can show how recent a post really is.\nHugo\u0026rsquo;s Git Integration Hugo can natively retrieve information from git, and it\u0026rsquo;s very easy to enable it. To do so, you simply need to add one line in your config file.\nconfig.toml\nenableGitInfo = true Hint: if your config file is a yaml file, you can look up an online tool to easily convert from toml syntax to yaml syntax. Search \u0026ldquo;toml to yaml\u0026rdquo; on Google and pick your favorite tool.\nThis enables the .GitInfo object on Hugo, as well as .Lastmod. For the purpose of this post, we will focus on lastmod. Hugo will now automatically update lastmod based on the last time each post was updated based on the git commit timestamp.\nIntegrating Lastmod with Hugo Theme We now have lastmod, but not all themes support the variable. I use PaperMod as my theme, which does not natively support last mod. To fix this, we need to override the theme\u0026rsquo;s template.\nFirst, we will copy layouts/partials/post_meta.html from PaperMod to our own layouts folder. This will let Hugo know to use our own layout file instead of the theme\u0026rsquo;s.\nNext, we will modify the file we just copied so that we can display last modified date on each post. Please note that the codes shown below are taken and adapted from Use Lastmod with Papermod by Jackson Lucky.\nAdd this code block at the top of post_meta.html to add variables. The variables will be used later to compare whether both dates are the same or not.\n{{ $date := .Date.Format \u0026#34;02.01.2006\u0026#34; }} {{ $lastmod := .Lastmod.Format \u0026#34;02.01.2006\u0026#34; }} Add this code block after {{- if not .Date.IsZero -}} block ends. This will show the last modified date only if the last modified date is different from the original publish date.\n{{- if ne $lastmod $date -}} {{- $scratch.Add \u0026#34;meta\u0026#34; (slice (printf \u0026#34;\u0026lt;span title=\u0026#39;%s\u0026#39;\u0026gt;Last Modified %s\u0026lt;/span\u0026gt;\u0026#34; (.Lastmod) (.Lastmod | time.Format (default \u0026#34;January 2, 2006\u0026#34; site.Params.DateFormat)))) }} {{- end }} Now each post should automatically show the last modified date, if it differs from the original publish date. Also, if you ever need to display another post metadata, you can take similar steps to display whatever post metadata you want for your blog!\nLearning Sources Add a Last Edited Date to Posts by Edd Turtle\nUse Lastmod with Papermod by Jackson Lucky\n","permalink":"https://koprecel.github.io/post/last-edited-date-on-hugo/","summary":"Introduction I frequently start a post and edit them as I learn. As such, my posts are constantly updated but the post date stays in the past. Plus, if I learn something in the future, I want to revisit my old posts and add relevant information as needed. The thing is that I don\u0026rsquo;t want to worry about manually changing the \u0026ldquo;Last Edited Date\u0026rdquo;; rather, I want it done automatically. Fortunately, there is a way to do exactly that on Hugo!","title":"How to Add a Last Edited Date on Hugo"},{"content":"Introduction I created this blog to start journaling my programming experiences and keep a record of what I learn along the way. After a few hours of struggling with GitHub Pages and Hugo, this blog successfully went live! That being said, there is still a lot of work to do. The very first thing I need to work on is to learn how to make a post, so that I can write about things I learn in the future. At the same time, I want to start generating contents for this blog as well. This post is about hitting two birds with one stone: I\u0026rsquo;m learning Markdown by making this post, and I\u0026rsquo;m also making a guide out of it.\nThis guide is specific to Hugo and Goldmark Markdown processor, so you might find some inaccuracies if you\u0026rsquo;re not using these technologies.\nHeadings Headings can be created by using #. The number of #\u0026rsquo;s determine the Heading\u0026rsquo;s level. Here is an example:\nMarkdown Output # Heading level 1 Heading level 1 ## Heading level 2 Heading level 2 ### Heading level 3 Heading level 3 Best practices for Headings is to have blank lines before and after.\nStylizing Text Bold You can bolden a text by wrapping it with either ** or __ around the text. Here is an example:\nMarkdown Output Wow, what a **bold** move! Wow, what a bold move! Wow, what a __bold__ move! Wow, what a bold move! Italic You can italicize a text by wrapping it with either * or _ around the text. Here is an example:\nMarkdown Output A *duck* walked up to a lemonade stand A duck walked up to a lemonade stand A _duck_ walked up to a lemonade stand A duck walked up to a lemonade stand Hint: You can bolden and italicize at the same time by using *** or ___\nSome Markdown applications don\u0026rsquo;t handle underscores the same way, so it is the best to use asterisks for bold and italic.\nStrikethrough You can strikethrough a text by wrapping it with ~~ around the text. Here is an example:\nMarkdown Output I can\u0026rsquo;t believe it\u0026rsquo;s not ~~butter~~! I can\u0026rsquo;t believe it\u0026rsquo;s not butter! Code You can denote a text as code by wrapping it with ` around the text. If the text contains ` within, you can use `` instead to denote the text as code. Here is an example:\nMarkdown Output `print(\u0026ldquo;Hello World!\u0026rdquo;)` print(\u0026quot;Hello World!\u0026quot;) ``denote code with `!`` denote code with `! Link You can hyperlink a text by wrapping the text in square brackets followed by the link wrapped in parentheses. Here is an example:\nMarkdown Output [Min\u0026rsquo;s Learning Den](https://koprecel.github.io/) Min\u0026rsquo;s Learning Den Blockquotes Did you notice how the hint looks different than regular paragraph in the previous section? It\u0026rsquo;s called a blockquote and it\u0026rsquo;s created by adding a \u0026gt; at the beginning of a text.\nMarkdown:\n\u0026gt; Just like this!\nRendition:\nJust like this!\nMultiline Blockquotes You can also use blockquote with multiple lines by adding \u0026gt; on the blank lines.\nMarkdown:\n\u0026gt; Blockquotes are \u0026gt; \u0026gt; really cool! Rendition:\nBlockquotes are\nreally cool!\nNesting Blockquotes You can also nest blockquotes by adding another \u0026gt;.\nMarkdown:\n\u0026gt; blockquote level 1 \u0026gt; \u0026gt;\u0026gt; blockquote level 2 \u0026gt; \u0026gt; back to level 1! Rendition:\nblockquote level 1\nblockquote level 2\nback to level 1!\nLists Ordered List You can make an ordered list by adding a number and a period at the beginning of the line. You can also nest another list by indenting!\nMarkdown:\n1. one step to the left 2. one step to the back 3. one hop 4. stomp 1. right foot 2. left foot 5. cha cha real smooth Rendition:\none step to the left one step to the back one hop stomp right foot left foot cha cha real smooth Unordered List You can make an unordered list by adding one of the following symbols to the beginning of the line: -, *, +\nMarkdown:\n* apple - banana + peach Rendition:\napple banana peach Fenced Code Block When you want to have more than one line of text as code, you can use fenced code block by starting a paragraph with ```.\nYou can also denote which language you are using next to the ``` to highlight the syntax accordingly.\nMarkdown:\n```py if bank_balance \u0026gt;= tuition: student.attend = true else: student.attend = false student.work() ``` Rendition:\nif money \u0026gt;= tuition: student.attend = true else: student.attend = false student.work() Table You can use pipes (|) and three or more hyphens (\u0026mdash;) in a tabular shape to create a table.\nYou can align the text in each column by adding a colon (:) to left, right, or on both sides of the header hyphens.\nMarkdown:\n| Normal | Left Align | Center Align | Right Align | | ------ | :--------- | :----------: | ----------: | | one | two | three | four | | five | six | seven | eight | Rendition:\nNormal Left Align Center Align Right Align one two three four five six seven eight You can also stylize text within table!\nImages You can insert an image by using a similar syntax to link, but with an exclamation mark at the very front. To be more explicit, you can insert an image by starting with an exclamation point, then wrapping the alternative text in square brackets, followed by the link to image wrapped in parentheses.\nMarkdown:\n![Say hi to my feline son, Babo :)](/images/babo.png) Rendition: Learning Sources Hugo Markdown Reference\n","permalink":"https://koprecel.github.io/post/markdown-tutorial/","summary":"Introduction I created this blog to start journaling my programming experiences and keep a record of what I learn along the way. After a few hours of struggling with GitHub Pages and Hugo, this blog successfully went live! That being said, there is still a lot of work to do. The very first thing I need to work on is to learn how to make a post, so that I can write about things I learn in the future.","title":"Learning How To Make Hugo Posts with Markdown"}]